//  You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
//  Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
//  You may assume that you have an infinite number of each kind of coin.
//  Time complexity O(n)
//  space complexity O(amount)
//********************CODE****************************//
 
 int recur(vector<int>& coins, int amount,vector<int> &dp) {
         if(amount==0){
            return 0;
        }
        if(dp[amount]!=-1){
            return dp[amount];
        }
        if(amount<0) return -1;
        int ans=INT_MAX-1;
        for(int i=0;i<coins.size();i++){
            if(amount-coins[i]>=0){
            ans=min(ans,recur(coins,amount-coins[i],dp)+1);                
            }
        }
        return dp[amount]=ans;
    }

    

public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1,-1);
        int ans=tab(coins,amount);
        if(ans==INT_MAX-1){
            return -1;
        }
        else{
            return ans;
        }
    }
