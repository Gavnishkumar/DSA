Input: "4(2(3)(1))(6(5))"
Output: 3 2 1 4 5 6
Explanation:
           4
         /   \
        2     6
       / \   / 
      3   1 5   
//*************************CODE***********************//
      
      
      class Solution{
public:
map<int,int> m;                 // map store the mapping between open parenthesis and corresponding closing parenthesis
void mapping(string s){
    int i=0;
    int n=s.length();
    stack<int> st;
    for(int i=0;i<n;i++){
        if(s[i]=='('){
            st.push(i);
        }
        if(s[i]==')'){
            m[st.top()]=i;
            st.pop();
        }
    }
}
bool isDigit(char ch){
    if(ch<='9' && ch>='0'){
        return true;
    }
    return false;
}
Node* recur(string str,int si,int ei){
    if(si>ei){
        return NULL;
    }
    int num=0;
    while(si<str.length() && isDigit(str[si])){
        int x=str[si]-'0';
        num=num*10+x;
        si++;
    }
    si--;
    Node* root=new Node(num);
    int y=-1;
    if(si+1 <=ei && str[si+1]=='('){
        y=m[si+1];
    }
    if(y!=-1){
        root->left=recur(str,si+2,y-1);
        root->right=recur(str,y+2,ei-1);
    }
    return root;
}
    // function to construct tree from string
    Node *treeFromString(string str){
        // code here
        
        mapping(str);
        return recur(str,0,str.length()-1);
    }
};
