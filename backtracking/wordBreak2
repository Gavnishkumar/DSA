Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each
word is a valid dictionary word. Return all such possible sentences in any order.
Note that the same word in the dictionary may be reused multiple times in the segmentation.
Example 1:
Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]
//*******************************using back tracking*******************************
class Solution {
public:
vector<string> finalans;
void addSolution(vector<string>&ans){
    string s="";
    for(int i=0;i<ans.size();i++){
        s=s + ans[i];
        s=s + " ";
    }
    s.pop_back();
    finalans.push_back(s);
}
bool find(vector<string>& wordDict,string str){
    for(int i=0;i<wordDict.size();i++){
        if(str==wordDict[i]) return true;
    }
    return false;
}
   void solve(vector<string>&ans,vector<string>&wordDict,string s){
       if(s==""){
           addSolution(ans);
           return;
       }
       for(int i=0;i<s.size();i++){
           if(find(wordDict,s.substr(0,i+1))){
               ans.push_back(s.substr(0,i+1));
               solve(ans,wordDict,s.substr(i+1));
               ans.pop_back();
           }
       }

   }
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        vector<string> ans;
        solve(ans,wordDict,s);
        return finalans;
    }
};
