Given a sorted array keys[0.. n-1] of search keys and an array freq[0.. n-1] of frequency counts,
where freq[i] is the number of searches to keys[i]. Construct a binary search tree of all keys such 
that the total cost of all the searches is as small as possible.
Let us first define the cost of a BST. The cost of a BST node is level of that node multiplied by its
frequency. Level of root is 1.


Example 1:

Input:
n = 2
keys = {10, 12}
freq = {34, 50}
Output: 118
Explaination:
There can be following two possible BSTs 
        10                       12
          \                     / 
           12                 10
                              
The cost of tree I is 34*1 + 50*2 = 134
The cost of tree II is 50*1 + 34*2 = 118 

Example 2:


Input:
N = 3
keys = {10, 12, 20}
freq = {34, 8, 50}
Output: 142
Explaination: There can be many possible BSTs
     20
    /
   10  
    \
     12  
     
Among all possible BSTs, 
cost of this BST is minimum.  
Cost of this BST is 1*50 + 2*34 + 3*8 = 142


//******************************CODE********************************//



 int solveTab(int keys[],int freq[],int n){
        vector<vector<int>> dp(n,vector<int> (n));
        for(int g=0;g<n;g++){
            for(int i=0,j=g;j<n;j++,i++){
                if(g==0){
                    dp[i][j]=freq[i];
                }
                else if(g==1){
                    dp[i][j]=min(dp[i][j-1]+2*dp[i+1][j],dp[i+1][j]+2*dp[i][j-1]);
                }
                else{
                    int fs=0;
                    int min=INT_MAX;
                    for(int k=i;k<=j;k++){
                        fs+=freq[k];
                    }
                    for(int k=i;k<=j;k++){
                        int left= k==0?0 : dp[i][k-1];
                        int right= k==n-1?0 : dp[k+1][j];
                        if(min>left+right+fs){
                            min = left+right+fs;
                        }
                    }
                    dp[i][j]=min;
                }
            }
        }
        return dp[0][n-1];
    }
    int optimalSearchTree(int keys[],int freq[], int n)
    {
        return solveTab(keys,freq,n);
    }
