There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

Example 1:

Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.

//******************************************CODE********************************************
void dfs(int node,int parent,int timer,vector<int> &disc,vector<int> &low,vector<vector<int>> &result,unordered_map<int,vector<int>> &adj,vector<bool>&vis)
{
    vis[node]=true;
    disc[node]=low[node]=timer++;   // set disc and low node initial to arrival at that node
    for(auto nbr: adj[node]){       // loop for all neighbours 
        if(nbr==parent) continue;   // if neighbour is parent than skip 
        if(!vis[nbr]){                  // if neighbour is not visited yet than call dfs for that node
            dfs(nbr,node,timer,disc,low,result,adj,vis);
            low[node]=min(low[node],low[nbr]);  // then set low[node]=minimum of last value at low and low value at neighbour 
            // check if edge is bridge 
            if(low[nbr]>disc[node]){   // if low[nbr] is more than disc[node] than bridge edge
                vector<int> ans;
                ans.push_back(node);
                ans.push_back(nbr);
                result.push_back(ans);
            }
        }
        else{
                low[node]=min(low[node],disc[nbr]);
        }
    }
}
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        unordered_map<int,vector<int>> adj;
        for(int i=0;i<connections.size();i++){
            int u=connections[i][0];
            int v=connections[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<int> disc(n,-1);// when node is first time discovered or say found
        vector<int> low(n,-1);// when node have path to reach there in less than disc[i] then update it
        int timer=0;
        int parent =-1;
         vector<vector<int>> result; // storing pair of nodes whose edge is bridge
        vector<bool> vis(n,false);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                dfs(i,parent,timer,disc,low, result,adj,vis);
            }
        }
        return result;
    }
