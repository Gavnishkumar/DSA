    
 Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 

Note: The flattened list will be printed using the bottom pointer instead of the next pointer.
For more clarity have a look at the printList() function in the driver code.   
    
Example 1:

Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45 

//********************************CODE**********************************//

    Node* merge(Node* list1,Node* list2){
       if(list1==NULL) return list2;
       if(list2==NULL) return list1;
       Node * result;
       if(list1->data<list2->data){
           result=list1;
           result->bottom=merge(list1->bottom,list2);
       }
       else{
           result=list2;
           result->bottom=merge(list1,list2->bottom);
       }
       result->next=NULL;
       return result;
    }
Node *flatten(Node *root)
{
    if(root==NULL || root->next==NULL){
        return root;
    }
    return merge(root,flatten(root->next));
}
