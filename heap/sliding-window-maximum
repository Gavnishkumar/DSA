//You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the 
//array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

//Return the max sliding window.
//Example 1:

//Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
//Output: [3,3,5,5,6,7]
//Explanation: 
//Window position                Max
//---------------               -----
////[1  3  -1] -3  5  3  6  7       3
 //1 [3  -1  -3] 5  3  6  7       3
 //1  3 [-1  -3  5] 3  6  7       5
 //1  3  -1 [-3  5  3] 6  7       5
 //1  3  -1  -3 [5  3  6] 7       6
 //1  3  -1  -3  5 [3  6  7]      7
// Time comlesity O(n)
// Space complexity O(n)
//******************************* CODE*********************************//

vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n=nums.size();
        vector<int> ans(n-k+1);
        deque<int> dq;
        
        for(int i=0;i<k;i++){
            while(!dq.empty() && nums[dq.back()]<=nums[i]){
                dq.pop_back();
            }
            dq.push_back(i);
        }
       ans[0]=nums[dq.front()];
        
        for(int i=k;i<n;i++){
            if(dq.front()<=i-k){
                dq.pop_front();
            }
                while(!dq.empty() && nums[dq.back()]<=nums[i]){
                    dq.pop_back();
                }
            dq.push_back(i);
            ans[i-k+1]=nums[dq.front()];
            
        }
        return ans;
    }
