Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}

//*************************************** CODE **********************************************//

Node* cloneGraph(Node* node) {
        if(node==NULL) return NULL;
        queue<Node*> q;
        q.push(node);
        Node* ans=NULL;
        unordered_map<Node*,Node*> m;
        m[node]=new Node(node->val);
       while(!q.empty()){
           Node* temp = q.front();
           q.pop();
           for(Node* it: temp->neighbors){
               if(!m[it]){
                   m[it]=new Node(it->val);
                   q.push(it);
               }
               m[temp]->neighbors.push_back(m[it]);
           }
       }
       return m[node];
    }
