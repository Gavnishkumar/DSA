Given an array of integers preorder, which represents the preorder traversal of a BST (i.e.
, binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly
less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

Example 1:

Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

//********************************CODE******************************//


TreeNode* solve(vector<int> &pre,int &i,int ran){
    if(i==pre.size() || pre[i]>ran) return NULL;
    TreeNode* root=new TreeNode(pre[i++]);
    root->left=solve(pre,i,root->val);
    root->right=solve(pre,i,ran);
    return root;
  }
    TreeNode* bstFromPreorder(vector<int>& pre) {
        int n=pre.size();
        if(n==0){
            return NULL;
        }
        int i=0;
       return solve(pre,i,INT_MAX);
    }
    
    
