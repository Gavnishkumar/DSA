//****************LEVEL ORDER TRAVERSAL***********************//
vector<int> levelOrder(Node* node)
    {
        vector<int> ans;
        queue<Node*> q;
        q.push(node);
       
        while(!q.empty()){
            Node* temp=q.front();
            q.pop();
            ans.push_back(temp->data);
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
        return ans;
      
    }
 //***********************INORDERED TRAVERSAL**********************************//
 // LNR TECHNIQUE
 class Solution {
    void inOrder(TreeNode* root,vector<int> &v){
        if(root!=NULL){
        inOrder(root->left,v);
        v.push_back(root->val);
        inOrder(root->right,v);
    }
    }
    
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
       inOrder(root,v);
        return v;
    }
};
//******************************PREORDERED TRAVERSAL**************************************//
//  NLR
void preOrdered(TreeNode* root,vector<int>& ans){
    if(root==NULL) return;
    ans.push_back(root->val);
    preOrdered(root->left,ans);
    preOrdered(root->right,ans);
}
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
        preOrdered(root,ans);
        return ans;
    }
    
//****************************POSTORDERED TRAVERSAL***************************************//
// LRN
void PostOrdered(TreeNode* root,vector<int>&ans){
    if(root==NULL) return;
    PostOrdered(root->left,ans);
    PostOrdered(root->right,ans);
    ans.push_back(root->val);
}
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        PostOrdered(root,ans);
        return ans;
    }
//*****************************************ITERATIVE TRAVERSAL***************************************************
INORDERED
 vector<int> inorderTraversal(TreeNode* root) {
    //     vector<int> v;
    //    inOrder(root,v);
    //     return v;
    // iterative method
    vector<int> ans;
        stack<TreeNode*> s;
     
        TreeNode* node=root;
        while(true){
            if(node!=NULL){
                s.push(node);
                node=node->left;
            }
            else{
                if(s.empty()) break;
                node=s.top();
                s.pop();
                ans.push_back(node->val);
                node=node->right;
            }
        }
        return ans;
    }
    
    
PREORDERED
vector<int> preorderTraversal(TreeNode* root) {
     vector<int> ans;
        stack<TreeNode*> s;
     
        TreeNode* node=root;
        while(true){
            if(node!=NULL){
                s.push(node);
                ans.push_back(node->val);
                node=node->left;
            }
            else{
                if(s.empty()) break;
                node=s.top();
                s.pop();
                
                node=node->right;
            }
        }
        return ans;
    }
    
    
POST ORDERED

    vector<int> postorderTraversal(TreeNode* root) {
       
        vector<int>ans;
        if(root==NULL) return ans;
        stack<TreeNode*> s1;
        stack<TreeNode*> s2;
        s1.push(root);
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
            if(s2.top()->left!=NULL)
                s1.push(s2.top()->left);
            if(s2.top()->right!=NULL)
                s1.push(s2.top()->right);
        }
       while(!s2.empty()){
           ans.push_back(s2.top()->val);
           s2.pop();
    }
       return ans;
    }

