There are a total of N tasks, labeled from 0 to N-1. Some tasks may have prerequisites, for example to do task 0 you have to
first complete task 1, which is expressed as a pair: [0, 1]
Given the total number of tasks N and a list of prerequisite pairs P, find if it is possible to finish all tasks.


Example 1:

Input: 
N = 4, P = 3
prerequisites = {{1,0},{2,1},{3,2}}
Output:
Yes
Explanation:
To do task 1 you should have completed
task 0, and to do task 2 you should 
have finished task 1, and to do task 3 you 
should have finished task 2. So it is possible.
Example 2:

Input:
N = 2, P = 2
prerequisites = {{1,0},{0,1}}
Output:
No
Explanation:
To do task 1 you should have completed
task 0, and to do task 0 you should
have finished task 1. So it is impossible.

//**************************************************CODE*******************************************//
bool isPossible(int n, vector<pair<int, int>>& pre) {
	    // Code here
	  vector<int> adj[n];
	  vector<int> indegree(n,0);
	  for(auto it: pre){
	      adj[it.second].push_back(it.first);
	      indegree[it.first]++;
	  }
	  queue<int> q;
	  for(int i=0;i<indegree.size();i++){
	      if(indegree[i]==0){
	          q.push(i);
	      }
	  }
	  int count=0;
	  while(!q.empty()){
	      int node=q.front();
	      q.pop();
	      count++;
	      for(auto it: adj[node]){
	          indegree[it]--;
	          if(indegree[it]==0){
	              q.push(it);
	          }
	      }
	  }
	  return count==n;
	}
