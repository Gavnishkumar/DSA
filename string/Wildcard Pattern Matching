Given two strings 'str' and a wildcard pattern 'pattern' of length N and M respectively, 
You have to print '1' if the wildcard pattern is matched with str else print '0' .

The wildcard pattern can include the characters ‘?’ and ‘*’
‘?’ – matches any single character
‘*’ – Matches any sequence of characters (including the empty sequence)

Note: The matching should cover the entire str (not partial str).

 

Example 1:

Input:
pattern = "ba*a?"
str = "baaabab"
Output: 1
Explanation: replace '*' with "aab" and 
'?' with 'b'. 
Example 2:

Input:
pattern = "a*ab"
str = "baaabab"
Output: 0
Explanation: Because of'a' at first position,
pattern and str can't be matched. 
//*********************************************CODE******************************************//

bool solvetab(string s,string p){
        int n=s.size();
        int m=p.size();
        vector<vector<int>> dp(n+1,vector<int> (m+1,0));
        dp[0][0]=true;
        for(int j=1;j<=m;j++){
            bool flag=true;
            for(int k=1;k<=j;k++){
                if(p[k-1]!='*'){
                    flag=false;
                    break;
                }
            }
            dp[0][j]=flag;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(p[j-1]==s[i-1] || p[j-1]=='?'){
                     dp[i][j]=dp[i-1][j-1];
                }
                else if(p[j-1]=='*'){
                    bool a = dp[i][j-1];
                    bool b = dp[i-1][j];
            dp[i][j]= a || b;
       }
       else{
            dp[i][j]=false;
       }
            }
        }
        return dp[n][m];
    }
    int wildCard(string pattern,string str)
    {
        return solvetab(str,pattern);
    }
