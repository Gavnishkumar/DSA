Given a square chessboard, the initial position of Knight and position of a target. Find out the minimum steps a Knight will take to reach the target position.If it cannot reach the target position return -1.

Note:
The initial and the target position co-ordinates of Knight have been given accoring to 1-base indexing.

Example 1:

Input:
N=6
knightPos[ ] = {4, 5}
targetPos[ ] = {1, 1}
Output:
3
//**********************************CODE*******************************
int minStepToReachTarget(vector<int>&KnightPos, vector<int>&TargetPos, int N){
        // Code here
        queue<pair<int,pair<int,int>>> q;
        vector<vector<int>>vis(N+1,vector<int>(N+1,0));
        KnightPos[0]-=1;
        KnightPos[1]-=1;
        TargetPos[0]-=1;
        TargetPos[1]-=1;
        q.push({0,{KnightPos[0],KnightPos[1]}});
        
        vis[KnightPos[0]][KnightPos[1]]=1;
        
        int d1[8]={ 2, 2, -2, -2, 1, 1, -1, -1 };
        int d2[8]={ -1, 1, 1, -1, 2, -2, 2, -2 };
        
        while(!q.empty()){
            auto it = q.front();
            int steps=it.first;
            int row = it.second.first;
            int col = it.second.second;
            q.pop();
            
            if(row==TargetPos[0] && col==TargetPos[1]){
                return steps;
            }
            
            for(int i=0;i<8;i++){
                int nrow = d1[i]+row;
                int ncol = d2[i]+col;
                
                if(nrow>=0 && nrow<=N && ncol>=0 && ncol<=N &&  vis[nrow][ncol]==0){
                    vis[nrow][ncol]=1;
                    q.push({steps+1,{nrow,ncol}});
                }
            }
        }
            return -1;
	}
