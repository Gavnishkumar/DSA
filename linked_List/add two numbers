//   Given two decimal numbers represented by two linked lists of size N and M respectively.
//   The task is to return a linked list that represents the sum of these two numbers.

//   For example, the number 190 will be represented by the linked list, 1->9->0->null,
//   similarly 25 by 2->5->null. Sum of these two numbers is 190 + 25 = 215, which will be 
//   represented by 2->1->5->null. You are required to return the head of the linked list 2->1->5->null.


/********************************** C O D E ***************************************/


class Solution
{
    
     Node* reversed(Node* head){
        Node* prev=NULL;
        Node* curr=head;
        Node* nex=head->next;
        while(nex!=NULL){
            curr->next=prev;
            prev=curr;
            curr=nex;
            nex=nex->next;
        }
        curr->next=prev;
        return curr;
    }
    public:
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        Node* firstrev= reversed(first);
        Node* secondrev=reversed(second);
        Node* ans=new Node(0);
        Node* head=ans;
        int carry=0;
        while(firstrev!=NULL || secondrev!=NULL){
            if(firstrev!=NULL && secondrev!=NULL){
                int sum= firstrev->data + secondrev->data +carry;
                if(sum>=10){
                    carry=1;
                    Node* temp=new Node(sum%10);
                    ans->next=temp;
                    ans=temp;
                }
                else{
                    carry=0;
                    Node* temp=new Node(sum);
                    ans->next=temp;
                    ans=temp;
                }
                firstrev=firstrev->next;
                secondrev=secondrev->next;
            }
            else if(firstrev!=NULL){
                int sum= firstrev->data + carry;
                if(sum>=10){
                    Node*temp=new Node(sum%10);
                    carry=1;
                ans->next=temp;
                ans=temp;
                 firstrev=firstrev->next;  
                }
                else{
                     Node*temp=new Node(sum);
                     carry=0;
                    ans->next=temp;
                    ans=temp;
                     firstrev=firstrev->next;  
                }
                            
            }
            else{
                 int sum= secondrev->data + carry;
                 if(sum>=10){
                     Node*temp=new Node(sum%10);
                     carry=1;
                ans->next=temp;
                ans=temp;
                 secondrev=secondrev->next;
                 }
                 else{
                         carry=0;
                Node*temp=new Node(sum);
                ans->next=temp;
                ans=temp;
                 secondrev=secondrev->next;
                 }
            
            }
        }
        if(carry==1){
            Node*temp=new Node(carry);
            ans->next=temp;
            ans=temp;
        }
        head=head->next;
        
        return reversed(head);
    }
};
