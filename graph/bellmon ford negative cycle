Negative weight cycle


Given a weighted directed graph with n nodes and m edges. Nodes are labeled from 0 to n-1, 
the task is to check if it contains a negative weight cycle or not.
Note: edges[i] is defined as u, v and weight.
 

Example 1:

Input: n = 3, edges = {{0,1,-1},{1,2,-2},
{2,0,-3}}
Output: 1
Explanation: The graph contains negative weight
cycle as 0->1->2->0 with weight -1,-2,-3.

//*****************************************code***********************************//
we are applyig reducing minimum short path n-1 time if after n-1 time another reducement leads to update distance array then a negative cycle is present
	int isNegativeWeightCycle(int n, vector<vector<int>>edges){
	    vector<int> d(n,1e9);
	    d[0]=0;
	   int f=0;
	    for(int i=0;i<n;i++){
	      
	        for(int j=0;j<edges.size();j++){
	            int u=edges[j][0];
	            int v=edges[j][1];
	            int wt=edges[j][2];
	            if(d[u]+wt<d[v]){
	                if(i==n-1) f=1;;
	                d[v]=d[u]+wt;
	               
	            }
	        }
	    }
	  
	    return f;
	}
