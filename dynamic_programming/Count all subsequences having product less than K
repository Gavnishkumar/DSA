Given a positive array, find the number of subsequences having product smaller than or equal to K.
Examples: 

Input : [1, 2, 3, 4] 
        k = 10
Output :11 
Explanation: The subsequences are {1}, {2}, {3}, {4}, {1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {1, 2, 3}, {1, 2, 4}

Input  : [4, 8, 7, 2] 
         k = 50
Output : 9
Approach: 
this is dp matrix created 
meaning of each cell is storing number of subsequence havning sum less than row index using element from arr[0] to arr[colindex]
0 0 0 0 0 
0 1 1 1 1 
0 1 3 3 3
0 1 3 5 5
0 1 3 5 7
0 1 3 5 7
0 1 3 7 9 
0 1 3 7 9
0 1 3 7 11 
0 1 3 7 11 
0 1 3 7 11 
//*********************************CODE*********************************//
#include<iostream> 
#include<bits/stdc++.h>
using namespace std; 
int main(){
    int n,k; 
    cin>>n>>k;
    vector<int> arr;
    for(int i=0;i<n;i++){
        int x;
        cin>>x;
        arr.push_back(x);
    }
    vector<vector<int>> dp(k+1,vector<int> (n+1,0));
    for(int i=1;i<=k;i++){
        for(int j=1;j<=n;j++){
            if(arr[j-1]>i){
                dp[i][j]=dp[i][j-1];
            }
            else{
                dp[i][j]=dp[i][j-1] + dp[i/arr[j-1]][j-1]+1;
            }
        }

    }
        for(int i=0;i<=k;i++){
            for(int j=0;j<=n;j++){
                cout<<dp[i][j]<<" ";
            }
            cout<<endl;
        }
        cout<<"Number of subsequence of product less than k : "<<dp[k][n]<<endl; 
    return 0;
}
