//     Given a root node reference of a BST and a key, delete the node with the given key in the BST. 
//     Return the root node reference (possibly updated) of the BST.

//     Basically, the deletion can be divided into two stages:

//     Search for a node to remove.
//     If the node is found, delete the node.

//***********************CODE********************//

int minval=INT_MAX;
void minvalfunc(TreeNode* root){
    if(root==NULL){
        return;
    }
    if(root->val<minval){
        minval=root->val;
    }
    minvalfunc(root->left);
    minvalfunc(root->right);
}
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL){
            return NULL;
        }
        if(root->val==key){
            if(root->left==NULL && root->right==NULL){
                delete root;
                return NULL;
            }
            if(root->left!=NULL && root->right==NULL){
                TreeNode* temp=root->left;
                delete root;
                return temp;
            }
            if(root->left==NULL && root->right!=NULL){
                TreeNode* temp=root->right;
                delete root;
                return temp;
            }
            if(root->left!=NULL && root->right!=NULL){
                minvalfunc(root->right);
                root->val=minval;
                root->right=deleteNode(root->right,minval);
                return root;

            }
        }
        if(root->val>key){
            root->left=deleteNode(root->left,key);
            return root;
        } 
        else{
            root->right = deleteNode(root->right,key);
            return root;
        } 
    }
