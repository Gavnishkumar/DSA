



Node*merge(Node*head1,Node* head2){
    if(head1==NULL) return head2;
    if(head2==NULL ) return head1;
    Node* ans=new Node(-1);
    Node* ans2=ans;
    while(head1!=NULL && head2!=NULL){
        if(head1->data<head2->data){
            Node*temp=new Node(head1->data);
            ans->next=temp;
            ans=temp;
            head1=head1->next;
        }
        else{
            Node*temp=new Node(head2->data);
            ans->next=temp;
            ans=temp;
            head2=head2->next;
        }
    }
    while(head1!=NULL){
        ans->next=head1;
        ans=head1;
        head1=head1->next;
    }
    while(head2!=NULL){
        ans->next=head2;
        ans=head2;
        head2=head2->next;
    }
    return ans2->next;
}
Node*midNode(Node*head,Node*tail){
    Node*slow=head;
    Node*fast=head;
    while(fast!=tail && fast->next!=tail){
        fast=fast->next->next;
        slow=slow->next;
    }
    return slow;
}
Node* ms(Node*head,Node*tail){
    if(head==tail){
        return head;
    }
    Node* mid=midNode(head,tail);
    Node* lc=ms(mid->next,tail);
    mid->next=NULL;
    Node* fs=ms(head,mid);
    return merge(fs,lc);
}
class Solution{
  public:
    Node* mergeSort(Node* head) {
        Node* tail=head;
        while(tail->next!=NULL) tail=tail->next;
        return ms(head,tail);
    }
