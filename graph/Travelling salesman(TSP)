Given a matrix cost of size n where cost[i][j] denotes the cost of moving from city i to city j. Your task is to complete a tour from the city 0 (0 based index) to all other cities such that you visit each city exactly once and then at the end come back to city 0 in min cost.
 

Example 1:

Input: cost = {{0,111},{112,0}}
Output: 223
Explanation: We can visit 0->1->0 and 
cost = 111 + 112.
Example 2:

Input: cost = {{0,1000,5000},{5000,0,1000},
{1000,5000,0}}
Output: 3000
Explanation: We can visit 0->1->2->0 and cost 
= 1000+1000+1000 = 3000


int solve(vector<vector<int>>&cost,int node,int mask,int n,vector<vector<int>> &dp){
    if(mask==(1<<n)-1) return cost[node][0]; // masking is used instead of visited array for minimum time complexity
                                             //if all node visited then return cost from last node to initial node
    if(dp[node][mask]!=-1) return dp[node][mask];
    int ans=INT_MAX;
    for(int i=0;i<n;i++){
        if((mask & (1<<i))==0){ // if this ith node is not visited then recursively call for it and also mark visited
            ans= min(ans,cost[node][i] + solve(cost,i,mask | 1<<i,n,dp));
        }
    }
    return dp[node][mask]= ans;
}
int total_cost(vector<vector<int>>cost){
    int n= cost.size();
    vector<vector<int>> dp(n+1,vector<int>(1<<n,-1));
    int ans= solve(cost,0,1,cost.size(),dp);
    if(ans==INT_MAX) return 0;
     return ans;
}
