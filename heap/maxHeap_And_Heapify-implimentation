//*****************************MAX HEAP******************************//
//    Insertion time complexity O(logn)
//    

#include <iostream>
using namespace std;
class maxheap
{
    int arr[100];
    int size = 0;

public:
    void insert(int val)
    {
        size++;
        int index = size;
        arr[index] = val;
        while (index > 1)
        {
            int parent = index / 2;
            if (arr[index] > arr[parent])
            {
                swap(arr[index], arr[parent]);
                index = parent;
            }
            else
            {
                return;
            }
        }
    }
    void deleteFromHeap()
    {
        arr[1] = arr[size];
        size--;
        int index = 1;
        while (index < size)
        {
            int leftindex = 2 * index;
            int rightindex = 2 * index + 1;
            if (leftindex < size && arr[leftindex] > arr[index])
            {
                swap(arr[leftindex], arr[index]);
                index = leftindex;
            }
            else if (rightindex < size && arr[rightindex] > arr[index])
            {
                swap(arr[rightindex], arr[index]);
                index = rightindex;
            }
            else
            {
                return;
            }
        }
    }
    void print()
    {
        for (int i = 1; i <= size; i++)
        {
            cout << arr[i] << " ";
        }
    }
};
void heapify(int arr[], int n, int i)
{
    int largest = i;
    int left = 2 * i;
    int right = 2 * i + 1;
    if (left < n && arr[left] > arr[largest])
    {
        largest = left;
    }
    else if (right < n && arr[right] > arr[largest])
    {
        largest = right;
    }
    if (largest != i)
    {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}
int main()
{
    maxheap newheap;
    newheap.insert(10);
    newheap.insert(16);
    newheap.insert(1);
    newheap.insert(8);
    newheap.insert(13);
    newheap.insert(11);
    newheap.print();
    newheap.deleteFromHeap();
    cout << endl;
    newheap.print();
    int arr[6] = {-1, 54, 53, 55, 52, 50};
    int n = 5;
    for (int i = n / 2; i > 0; i--)
    {
        heapify(arr, n, 1);
    }
    cout << endl;
    for (int i = 1; i < n; i++)
    {
        cout << arr[i] << " ";
    }
    return 0;
}


//**************************OUTPUT****************************//
16 13 11 8 10 1 
13 8 11 1 10
55 53 54 52
