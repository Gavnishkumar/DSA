A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation 
sequence from beginWord to endWord, or 0 if no such sequence exists.
TIME COMPLEXITY O(N2*WORDLENGTH*26)

//****************************************CODE*****************************************************

int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> myset;
        bool isPresent=false;
        for(auto word: wordList){
            if(word==endWord) isPresent=true;
            myset.insert(word);

        }
        if(isPresent==false){
            return 0;
        }
        queue<string> q;
        q.push(beginWord);
        int depth=0;
        while(!q.empty()){
            depth++;
            int lsize=q.size();
            while(lsize--){
                string curr=q.front();
                q.pop();
                for(int i=0;i<curr.size();i++){
                    string temp=curr;
                    for(char c='a';c<='z';c++){
                        temp[i]=c;
                        if(temp==curr) continue;
                        if(temp==endWord) return depth+1;
                        if(myset.find(temp)!=myset.end()){
                            q.push(temp);
                            myset.erase(temp);
                        }
                        
                    }
                }
            }
        }
        return 0;
    }
