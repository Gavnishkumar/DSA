//   Given K sorted arrays arranged in the form of a matrix of size K*K. The task is to merge them into one sorted array.
//   Example 1:

//   Input:
//   K = 3
//   arr[][] = {{1,2,3},{4,5,6},{7,8,9}}
//   Output: 1 2 3 4 5 6 7 8 9
//   Explanation:Above test case has 3 sorted
//   arrays of size 3, 3, 3
//   arr[][] = [[1, 2, 3],[4, 5, 6], 
//   [7, 8, 9]]
//   The merged list will be 
//   [1, 2, 3, 4, 5, 6, 7, 8, 9].

//*****************************************CODE******************************************//


class data{
    public:
    int val,apos,vpos;
    data(int v,int ap,int vp){
        val=v;
        apos=ap;
        vpos=vp;
    }
};
struct mycomp{
    bool operator()(data d1,data d2){
    return d1.val>d2.val;
}

};
class Solution
{
    public:

    vector<int> mergeKArrays(vector<vector<int>> arr, int k)
    {
    vector<int> ans;
    priority_queue<data,vector<data>,mycomp> pq;
    for(int i=0;i<k;i++){
        data d(arr[i][0],i,0);
        pq.push(d);
        
    }
    while(!pq.empty()){
        data curr=pq.top();
        pq.pop();
        ans.push_back(curr.val);
        int vp=curr.vpos;
        int ap=curr.apos;
        if(vp+1<arr[ap].size()){
            data d(arr[ap][vp+1],ap,vp+1);
            pq.push(d);
        }
    }
    return ans;
    }
