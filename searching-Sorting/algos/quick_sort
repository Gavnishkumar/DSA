//******************************quick sort****************************//
//Time complexity O(NlogN)
// Space complexity O(1)


class Solution
{
    public:
    //Function to sort an array using quick sort algorithm.
    void quickSort(int arr[], int low, int high)
    {
        if(low>=high){
            return;
        }
        int i=partition(arr,low,high);
        quickSort(arr,low,i-1);
        quickSort(arr,i+1,high);
    }
    
    public:
    int partition (int arr[], int low, int high)
    {
        int count=0;
       for(int i=low+1;i<=high;i++){
           if(arr[i]<=arr[low]){
               count++;
           }
       }
       swap(arr[low+count],arr[low]);
       int pivotIndex=low+count;
       int i=low;
       int j=high;
       while(i<pivotIndex && j>pivotIndex){
          while(i<pivotIndex && arr[i]<=arr[pivotIndex]){
              i++;
          }
          while(j>pivotIndex && arr[j]>arr[pivotIndex]){
              j--;
          }
          if(i<pivotIndex && j>pivotIndex){
              swap(arr[i],arr[j]);
          }
           
       }
       return pivotIndex;
    }
};
