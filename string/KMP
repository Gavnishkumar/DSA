Given two strings, one is a text string, txt and other is a pattern string, pat. The task is to print the indexes of all the occurences of pattern string in the text string. Use one-based indexing while returning the indices. 
Note: Return an empty list incase of no occurences of pattern. Driver will print -1 in this case.

Example 1:
Input:
txt = "geeksforgeeks"
pat = "geek"
Output: 
1 9
Explanation: 
The string "geek" occurs twice in txt, one starts are index 1 and the other at index 9. 
Example 2:

Input: 
txt = "abesdu"
pat = "edu"
Output: 
-1
Explanation: 
There's not substring "edu" present in txt.
//code
void lpsfunc(string p,vector<int>&lps){
        int prefix=0;
        int suffix=1;
        int n=p.size();
        lps[0]=0;
        while(suffix<n){
            if(p[prefix]==p[suffix]){
                prefix++;
                lps[suffix]= prefix;
                suffix++;
            }
            else{
                if(prefix==0){
                    lps[suffix]=0;
                    suffix++;
                }
                else{
                    prefix= lps[prefix-1];
                }
            }
        }
    }
        vector <int> search(string pat, string txt)
        {
            int m=pat.size();
            int n=txt.size();
            vector<int> ans;
            vector<int> lps(m);
            lpsfunc(pat,lps);
            int first=0;
            int second=0;
            while(first<n){
                if(second<m && pat[second]==txt[first]){
                    first++;
                    second++;
                }
                else{
                    if(second==0){
                        first++;
                    }
                    else{
                        second=lps[second-1];
                    }
                }
                if(second==m){
                    ans.push_back(first-second+1);
                    second=lps[second-1];
                }
            }
            return ans;
        }
