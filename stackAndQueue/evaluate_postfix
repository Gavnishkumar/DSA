// Evlaute postfix expression 
// O(n) TC and O(n) space complexity

/***********************USING STACK*********************************/

bool isoperator(string a){
        if(a =="/" || a =="*" || a =="+" || a =="-"){
            return true;
        }
        else{
            return false;
        }
    }
    int evalRPN(vector<string>& tokens) {
        stack<int> s;
       int i=0;
        while(i!=tokens.size()){
            if(!isoperator(tokens[i])){
                int b=stoi(tokens[i]);
                s.push(b);
                i++;
            }
            else{
                  int a=s.top();
                    s.pop();
                    int b=s.top();
                    s.pop();
                if(tokens[i]=="+"){
                    s.push(a+b);
                }
                else if(tokens[i]=="-"){
                    s.push(b-a);
                }
                else if(tokens[i]=="*"){
                    s.push(a*b);
                }
                else{
                    s.push(b/a);
                }
                i++;
            }
        }
        return s.top();
    }
